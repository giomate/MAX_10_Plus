
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module FFT_TEST(

	//////////// CLOCK //////////
	input 		          		ADC_CLK_10,
	input 		          		MAX10_CLK1_50,
	input 		          		MAX10_CLK2_50,
	input 		          		MAX10_CLK3_50,

	//////////// KEY //////////
	input 		          		FPGA_RESET_n,
	input 		     [4:0]		KEY,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// LEDR //////////
	output		     [9:0]		LEDR,

	//////////// HEX //////////
	output	reg	     [6:0]		HEX0,
	output		reg     [6:0]		HEX1,

	//////////// Audio //////////
	inout 		          		AUDIO_BCLK,
	output		          		AUDIO_DIN_MFP1,
	input 		          		AUDIO_DOUT_MFP2,
	inout 		          		AUDIO_GPIO_MFP5,
	output		          		AUDIO_MCLK,
	input 		          		AUDIO_MISO_MFP4,
	inout 		          		AUDIO_RESET_n,
	output		          		AUDIO_SCL_SS_n,
	output		          		AUDIO_SCLK_MFP3,
	inout 		          		AUDIO_SDA_MOSI,
	output		          		AUDIO_SPI_SELECT,
	inout 		          		AUDIO_WCLK,

	//////////// DAC //////////
	inout 		          		DAC_DATA,
	output		          		DAC_SCLK,
	output		          		DAC_SYNC_n,

	//////////// QSPI Flash //////////
	inout 		     [3:0]		FLASH_DATA,
	output		          		FLASH_DCLK,
	output		          		FLASH_NCSO,
	output		          		FLASH_RESET_n,

	//////////// Power Monitor //////////
	output		          		PM_I2C_SCL,
	inout 		          		PM_I2C_SDA,

	//////////// PS2 //////////
	inout 		          		PS2_CLK,
	inout 		          		PS2_CLK2,
	inout 		          		PS2_DAT,
	inout 		          		PS2_DAT2,

	//////////// Uart to USB //////////
	output		          		UART_RESET_n,
	input 		          		UART_RX,
	output		          		UART_TX,

	//////////// TMD 2x6 GPIO Header, TMD connect to TMD Default //////////
	inout 		     [7:0]		GPIO
);



//=======================================================
//  REG/WIRE declarations
//=======================================================
	reg pll_reset;
	wire [7:0] max_index;
	wire [11:0] adc_data;
	wire  [26:0] counter_value;
	wire  [19:0] counter20_value;
	reg [1:0] led_value;
	wire [15:0] dac_value;
	wire [15:0] dac_value2;



//=======================================================
//  Structural coding
//=======================================================

//7-SEG OFF  --
//assign  { HEX1[6:0] ,HEX0[6:0] } = 14'h3fff ; 

pll100 pll100MHz(

	.inclk0(MAX10_CLK1_50),
	.c0(pll100_clk),
	//.areset(pll_areset),
	.locked(pll100_locked)
	
	);

	pll_reset   #(
    .SYS_CLOCK_FREQ_HZ (100000000),
    .DEVICE_FAMILY ("Cyclone V")
  )
	pll_rst(
	.sys_clock (MAX10_CLK1_50),
	.pll_locked (pll100_locked),
	.pll_reset(pll_areset)
	
	);
counter c1(
.clock(pll100_clk),
.q(counter_value)
);


always@* begin
	if(counter_value==1) begin
		
		led_value[1]<=~LEDR[9];
		led_value[0]<=led_value[1];
	end
end
assign LEDR[9]=led_value[0];
	
fft_test_sys fft (
		       .clk_clk(pll100_clk),                                    //                            clk.clk
				 .dac_tones_generator_0_dac_out_data_dac(dac_value),
		       .dac_tones_generator_0_spi_data_data(DAC_DATA),        // dac_tones_generator_0_spi_data.data
		.dac_tones_generator_0_spi_data_spi_clk(DAC_SCLK),     //                               .spi_clk
		.dac_tones_generator_0_spi_data_spi_sync(DAC_SYNC_n),    //                               .spi_sync
		.dac_tones_generator_0_switches_switches_in(SW[4:0]), // dac_tones_generator_0_switches.switches_in
		
		.index_fft_0_index_out_max_index_byte(max_index),       //          index_fft_0_index_out.max_index_byte
		//.index_fft_0_rx_input_rx_in(adc_data),
		.pio_1_external_connection_export(max_index),           //      pio_1_external_connection.export
		.pio_1_external_connection_1_export(dac_value),
		.reset_reset_n(1'b1)                               //                          reset.reset_n
	);
	 //----LED DISPLAY--
assign LEDR[4:0]  =  SW [4:0] ; 


counter20 c20(
.clock(pll100_clk),
.q(counter20_value)
);

always@* begin
	if(counter20_value==1) begin
		HEX1[6:0]<= dac_value[15:9];
		HEX0[6:0]<= dac_value[8:2] ;
	end
end
//7-SEG OFF  --

endmodule
