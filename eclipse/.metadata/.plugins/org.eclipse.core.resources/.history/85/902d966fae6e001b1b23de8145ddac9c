/*
 * PLLLOCKEDCAPTURE.cpp
 *
 *  Created on: Feb 14, 2021
 *      Author: giova
 */

#include "PLLLOCKEDCAPTURE.h"

#include <stdio.h>
#include <unistd.h>
#include "system.h"
#include "sys/alt_irq.h"
#include "altera_avalon_pio_regs.h"

volatile uint8_t edge_capture;

PLL_LOCKED_CAPTURE::PLL_LOCKED_CAPTURE() {
	// TODO Auto-generated constructor stub

}

PLL_LOCKED_CAPTURE::~PLL_LOCKED_CAPTURE() {
	// TODO Auto-generated destructor stub
}

#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void handle_pll_interrupts(void* context)
#else
static void handle_button_interrupts(void* context, alt_u32 id)
#endif
{
  /* Cast context to edge_capture's type.
   * It is important to keep this volatile,
   * to avoid compiler optimization issues.
   */
  volatile uint8_t* edge_capture_ptr = (volatile uint8_t*) context;
  /* Store the value in the Button's edge capture register in *context. */
  *edge_capture_ptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(PIO_0_BASE);
  /* Reset the Button's edge capture register. */
  IOWR_ALTERA_AVALON_PIO_EDGE_CAP(PIO_0_BASE, 0);

  /*
   * Read the PIO to delay ISR exit. This is done to prevent a spurious
   * interrupt in systems with high processor -> pio latency and fast
   * interrupts.
   */
  IORD_ALTERA_AVALON_PIO_EDGE_CAP(PIO_0_BASE);
}

static void init_button_pio()
{
  /* Recast the edge_capture pointer to match the alt_irq_register() function
  * prototype. */
  void* edge_capture_ptr = (void*) &edge_capture;
  /* Enable all 4 button interrupts. */
  IOWR_ALTERA_AVALON_PIO_IRQ_MASK(PIO_0_BASE, 0x1);
  /* Reset the edge capture register. */
  IOWR_ALTERA_AVALON_PIO_EDGE_CAP(PIO_0_BASE, 0x0);

  /*
   * Register the interrupt handler.
   * Provision is made here for systems that might have either the
   * legacy or enhanced interrupt API active, or for the Nios II IDE
   * which does not support enhanced interrupts. For systems created using
   * the Nios II softawre build tools, the enhanced API is recommended
   * for new designs.
   */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(PIO_0_IRQ_INTERRUPT_CONTROLLER_ID, PIO_0_IRQ,
    handle_pll_interrupts, edge_capture_ptr, 0x0);
#else
  alt_irq_register( BUTTON_PIO_IRQ, edge_capture_ptr,
    handle_button_interrupts);
#endif
}
static void disable_button_pio()
{
  /* Disable interrupts from the button_pio PIO component. */
  IOWR_ALTERA_AVALON_PIO_IRQ_MASK(PIO_0_BASE, 0x0);
  /* Un-register the IRQ handler by passing a null handler. */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(PIO_0_IRQ_INTERRUPT_CONTROLLER_ID, PIO_0_IRQ,
    NULL, NULL, NULL);
#else
  alt_irq_register( BUTTON_PIO_IRQ, NULL, NULL );
#endif
}
bool PLL_LOCKED_CAPTURE::IsLocked(void){
	if(last_locked==edge_capture){
		continue;
	}else{
		is_locked=gpio_get_pin_level(PA06);
			if (is_locked)
			{
			}
			else
			{
				usleep(10*1000);
				is_locked=gpio_get_pin_level(PA06);
			}

			if (is_locked)
			{
				if (Get_OUT_MUX(2)>0)
				{
					current_frequency=Calculate_Current_Frequency(false)/1;
				}
				else
				{
					channel_divider=Get_Channel_Divider_Value(false);
					current_frequency=Calculate_Current_Frequency(false)/channel_divider;
				}
			}
			else
			{
		#ifdef ONLY_LOCK_SIGNAL

		#else
				is_locked=((Read_Single_Register(0x6e)>>9)&0x02);
		#endif

			}
	}

	return is_locked;
}
