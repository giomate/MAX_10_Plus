/*
 * lmx2694Handler.cpp
 *
 *  Created on: Feb 7, 2021
 *      Author: giova
 */

#include "lmx2694Handler.h"
#include "unistd.h"
static SPI_Handler staticSPI;
static uint16 local_read_registers[0x73];
static uint16 local_write_registers[0x73];


lmx2694_Handler::lmx2694_Handler() {
	// TODO Auto-generated constructor stub
	write_registers=local_read_registers;
	read_registers=local_write_registers;
}

lmx2694_Handler::~lmx2694_Handler() {
	// TODO Auto-generated destructor stub
}
bool lmx2694_Handler::Init(){
	spi=&staticSPI;
	spi->Init(SPI_0_BASE,0);
	spi->SetCS(true);
	Power_Down();
	Program_Reset();
	Initiate_Registers();
	Toggle_FCAL_EN();
	return ((Read_Single_Register(0x6e)>>9)&0x02);



}

bool lmx2694_Handler::Power_Down(){
	spi->SetCS(false);
	Get_Three_Bytes((uint32_t)PROGRAM_POWERDOWN);
	int_result=spi->WriteData(write_bytes,3);
	bool_result=int_result>0;
	spi->SetCS(true);
	return bool_result;
}
bool lmx2694_Handler::Write_FCAL_EN(bool st){

	if(st){
		register_value=Read_Single_Register(0)|(0x01<<FCAL_EN);
	}else{
		register_value=Read_Single_Register(0)&(~((uint16)(0x01<<FCAL_EN)));
	}
	int_result=Write_Single_Register(0,register_value);

	return int_result;
}
bool lmx2694_Handler::Toggle_FCAL_EN(){
	Write_FCAL_EN(false);
	usleep(100);
	bool_result=Write_FCAL_EN(true);

	return bool_result;
}
bool lmx2694_Handler::Program_Reset(){
	spi->SetCS(false);
	Get_Three_Bytes((uint32_t)PROGRAM_RESET_1);
	int_result=spi->WriteData(write_bytes,3);
	//bool_result=int_result>0;
	spi->SetCS(true);
	usleep(100);
	spi->SetCS(false);
	Get_Three_Bytes((uint32_t)PROGRAM_RESET_0);
	int_result=spi->WriteData(write_bytes,3);
	bool_result=int_result>0;
	spi->SetCS(true);
	return bool_result;
}
void lmx2694_Handler::Get_Three_Bytes(uint32_t data){
	for(int i=0; i<3;i++){
		write_bytes[2-i]=(uint8_t)((data>>(8*i))&0xff);
	}

}
void lmx2694_Handler::Make_Three_Bytes(uint8_t index, uint16 data){
	for(int i=0; i<2;i++){
		write_bytes[2-i]=(uint8_t)((data>>(8*i))&0xff);
	}
	write_bytes[0]=index;
}
void lmx2694_Handler::Initiate_Registers(){
	for(int i=NUMBER_REGISTERS; i>0;i--){
		Write_Single_Register(i-1,default_registers[i-NUMBER_REGISTERS]);

	}
}
int lmx2694_Handler::Write_Single_Register(uint8_t index,uint16 data){
	spi->SetCS(false);
	Make_Three_Bytes(index,data);
	int_result=spi->WriteData(write_bytes,3);
	spi->SetCS(true);
	return int_result;
}
uint16 lmx2694_Handler::Read_Single_Register(uint8_t index){
	spi->SetCS(false);
	private_index=index|0x80;

	//int_result=spi->WriteData(&private_index,1);
	//int_result=spi->ReadData(read_bytes,1);
	Write_Single_Register(0,(uint16)MUXOUT_READBACK);
	int_result=spi->TransferData(&private_index,1,read_bytes,2);
	register_value=read_bytes[1]*256+read_bytes[0];
	spi->SetCS(true);
	return register_value;
}
bool lmx2694_Handler::Self_Test(){
	return false;
}
