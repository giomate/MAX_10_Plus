
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module ADF5610(

	//////////// CLOCK //////////
	input 		          		ADC_CLK_10,
	input 		          		MAX10_CLK1_50,
	input 		          		MAX10_CLK2_50,
	input 		          		MAX10_CLK3_50,

	//////////// KEY //////////
	input 		          		FPGA_RESET_n,
	input 		     [4:0]		KEY,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// LEDR //////////
	output		     [9:0]		LEDR,

	//////////// HEX //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,

	//////////// DAC //////////
	inout 		          		DAC_DATA,
	output		          		DAC_SCLK,
	output		          		DAC_SYNC_n,

	//////////// QSPI Flash //////////
	inout 		     [3:0]		FLASH_DATA,
	output		          		FLASH_DCLK,
	output		          		FLASH_NCSO,
	output		          		FLASH_RESET_n,
	
		//////////// ADF5610 SPI //////////
	output		     		SPI_SCK,
	output		          		MOSI,
	input		          			MISO,
	output		          		CS_n,

	//////////// Power Monitor //////////
	output		          		PM_I2C_SCL,
	inout 		          		PM_I2C_SDA,

	//////////// PS2 //////////
	inout 		          		PS2_CLK,
	inout 		          		PS2_CLK2,
	inout 		          		PS2_DAT,
	inout 		          		PS2_DAT2,

	//////////// Uart to USB //////////
	output		          		UART_RESET_n,
	input 		          		UART_RX,
	output		          		UART_TX

	//////////// TMD 2x6 GPIO Header, TMD connect to TMD Default //////////
	//inout 		     [3:0]		GPIO
);



//=======================================================
//  REG/WIRE declarations
//=======================================================

wire reset_n;
wire spi_miso;
wire spi_mosi;
wire spi_clk;
wire spi_ss_n;
wire reset=~FPGA_RESET_n;
wire [27:0] counter_clk;
reg	led_clk=1'b0;


//=======================================================
//  Structural coding
//=======================================================
assign reset_n = 1'b1;
assign SPI_SCK=spi_clk;
assign MOSI=spi_mosi;
assign spi_miso=MISO;
assign  CS_n=spi_ss_n;
assign LEDR[0]=led_clk;

//7-SEG OFF  --
assign  { HEX1[6:0] ,HEX0[6:0] } = 14'h3fff ; 

clock_blink blink_counter(
	.clock(MAX10_CLK1_50),
	.q(counter_Clk)
	);
	
always @(*) begin
	//if	(reset) begin
		if (counter_clk== 0) begin 
		//	led_clk2<=~led_clk;
			led_clk <= ~led_clk;
		end
	//end
end
		
		

cpu spi_controller(
		 .clk_clk                               (MAX10_CLK1_50),                               //                        clk.clk
        .reset_reset_n                         (reset_n),                         //                      reset.reset_n
		.spi_adf5610_external_MISO(spi_miso), // spi_adf5610_external.MISO
		. spi_adf5610_external_MOSI (spi_mosi), //                     .MOSI
		.spi_adf5610_external_SCLK(spi_clk), //                     .SCLK
		.spi_adf5610_external_SS_n(spi_ss_n) //                     .SS_n
	);

endmodule
