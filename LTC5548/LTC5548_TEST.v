
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module LTC5548_TEST(

	//////////// CLOCK //////////
	input 		          		ADC_CLK_10,
	input 		          		MAX10_CLK1_50,
	input 		          		MAX10_CLK2_50,
	input 		          		MAX10_CLK3_50,

	//////////// KEY //////////
	input 		          		FPGA_RESET_n,
	input 		     [4:0]		KEY,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// LEDR //////////
	output		     [9:0]		LEDR,

	//////////// HEX //////////
	output		reg     [6:0]		HEX0,
	output		 reg    [6:0]		HEX1,

	//////////// Audio //////////
	inout 		          		AUDIO_BCLK,
	output		          		AUDIO_DIN_MFP1,
	input 		          		AUDIO_DOUT_MFP2,
	inout 		          		AUDIO_GPIO_MFP5,
	output		          		AUDIO_MCLK,
	input 		          		AUDIO_MISO_MFP4,
	inout 		          		AUDIO_RESET_n,
	output		          		AUDIO_SCL_SS_n,
	output		          		AUDIO_SCLK_MFP3,
	inout 		          		AUDIO_SDA_MOSI,
	output		          		AUDIO_SPI_SELECT,
	inout 		          		AUDIO_WCLK,

	//////////// DAC //////////
	inout 		          		DAC_DATA,
	output		          		DAC_SCLK,
	output		          		DAC_SYNC_n,

	//////////// QSPI Flash //////////
	inout 		     [3:0]		FLASH_DATA,
	output		          		FLASH_DCLK,
	output		          		FLASH_NCSO,
	output		          		FLASH_RESET_n,
		//////////// LMX2694 SPI //////////
	output		     				SPI_SCLK,
	output		          		MOSI,
	input 		          		MISO,
	output		          		CS_n,

	//////////// Power Monitor //////////
	output		          		PM_I2C_SCL,
	inout 		          		PM_I2C_SDA,

	//////////// PS2 //////////
	inout 		          		PS2_CLK,
	inout 		          		PS2_CLK2,
	inout 		          		PS2_DAT,
	inout 		          		PS2_DAT2,

	//////////// Uart to USB //////////
	output		          		UART_RESET_n,
	input 		          		UART_RX,
	output		          		UART_TX,

	//////////// TMD 2x6 GPIO Header, TMD connect to TMD Default //////////
	output		     [1:0]		OSC_OUT,
	input		     [1:0]		PLL_LOCKED
);



//=======================================================
//  REG/WIRE declarations
//=======================================================
	reg pll_reset;
	wire [7:0] max_index;
	wire [11:0] adc_data;
	wire  [27:0] counter_value;
	wire  [19:0] counter20_value;
	reg [1:0] led_value;
	wire [4:0] voltage_value;
	wire pll100_clk;
	wire pll100_locked;
	wire spi_miso;
wire spi_mosi;
wire spi_clk;
wire spi_ss_n;




//=======================================================
//  Structural coding
//=======================================================
assign	OSC_OUT[1]=pll100_clk;


pll100 pll100MHz(

	.inclk0(MAX10_CLK1_50),
	.c0(pll100_clk),
	//.areset(pll_areset),
	.locked(pll100_locked)
	
	);

	counter100MHz c1(
.clock(pll100_clk),
.q(counter_value)
);

ltc5548_sys cpu(
		.adc_in2_ch0_converter_0_adc_out_rx_in(adc_data), // adc_in2_ch0_converter_0_adc_out.rx_in
		.clk_clk(pll100_clk),                               //                             clk.clk
		.index_fft_0_output_uint8(max_index),  //           index_fft_0_index_out.max_index_byte
		.index_fft_0_input_uint12(adc_data),            //            index_fft_0_rx_input.rx_in
		.pio_0_external_connection_export(PLL_LOCKED),      //       pio_0_external_connection.export
		.pio_1_external_connection_export(adc_data),      //       pio_1_external_connection.export
		.pio_2_external_connection_export(max_index)   ,   //       pio_2_external_connection.export
		.pio_3_external_connection_export(OSC_OUT[0]),      //       pio_3_external_connection.export
		.reset_reset_n(FPGA_RESET_n),                        //                           reset.reset_n
		.spi_0_external_MISO(MISO),                   //                  spi_0_external.MISO
		.spi_0_external_MOSI(MOSI),                   //                                .MOSI
		.spi_0_external_SCLK(SPI_SCLK),                   //                                .SCLK
		.spi_0_external_SS_n(CS_n)                   //                                .SS_n
	);


always@* begin
	if(counter_value==1) begin
		
		led_value[1]<=~LEDR[9];
		led_value[0]<=led_value[1];
	end
end
assign LEDR[9]=led_value[0];
assign LEDR[7:0]=max_index;
assign voltage_value = adc_data / 163;
	
	always@(*)
	 begin
		case (voltage_value)
			0:
				begin
					HEX0 = value0;
					HEX1 = value0;
				end
			1:
				begin
					HEX0 = value1;
					HEX1 = value0;
				end
			2:
				begin
					HEX0 = value2;
					HEX1 = value0;
				end
			3:
				begin
					HEX0 = value3;
					HEX1 = value0;
				end
			4:
				begin
					HEX0 = value4;
					HEX1 = value0;
				end
			5:
				begin
					HEX0 = value5;
					HEX1 = value0;
				end
			6:
				begin
					HEX0 = value6;
					HEX1 = value0;
				end
			7:
				begin
					HEX0 = value7;
					HEX1 = value0;
				end
			8:
				begin
					HEX0 = value8;
					HEX1 = value0;
				end
			9:
				begin
					HEX0 = value9;
					HEX1 = value0;
				end
			10:
				begin
					HEX0 = value0;
					HEX1 = value1;
				end
			11:
				begin
					HEX0 = value1;
					HEX1 = value1;
				end
			12:
				begin
					HEX0 = value2;
					HEX1 = value1;
				end
			13:
				begin
					HEX0 = value3;
					HEX1 = value1;
				end
			14:
				begin
					HEX0 = value4;
					HEX1 = value1;
				end
			15:
				begin
					HEX0 = value5;
					HEX1 = value1;
				end
			16:
				begin
					HEX0 = value6;
					HEX1 = value1;
				end
			17:
				begin
					HEX0 = value7;
					HEX1 = value1;
				end
			18:
				begin
					HEX0 = value8;
					HEX1 = value1;
				end
			19:
				begin
					HEX0 = value9;
					HEX1 = value1;
				end
			20:
				begin
					HEX0 = value0;
					HEX1 = value2;
				end
			21:
				begin
					HEX0 = value1;
					HEX1 = value2;
				end
			22:
				begin
					HEX0 = value2;
					HEX1 = value2;
				end
			23:
				begin
					HEX0 = value3;
					HEX1 = value2;
				end
			24:
				begin
					HEX0 = value4;
					HEX1 = value2;
				end
			25:
				begin
					HEX0 = value5;
					HEX1 = value2;
				end
		
			default:
				begin
					HEX0 = value0;
					HEX1 = value0;
				end
		endcase
	 end
	
	wire [6:0]value0 = 7'b1000000;
	wire [6:0]value1 = 7'b1111001;
	wire [6:0]value2 = 7'b0100100;
	wire [6:0]value3 = 7'b0110000;
	wire [6:0]value4 = 7'b0011001;
	wire [6:0]value5 = 7'b0010010;
	wire [6:0]value6 = 7'b0000010;
	wire [6:0]value7 = 7'b1011000; //
	wire [6:0]value8 = 7'b0000000;
	wire [6:0]value9 = 7'b0010000;

endmodule
